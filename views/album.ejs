<%- include('layout/header') -%>

<%- include('components/adminheader') -%>

<!-- 
AlbumTitleH1
for each image on line ~~40
-->

<header class="bg-white shadow flex justify-between items-center">
<div class="max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
  <h1 class="text-3xl font-bold tracking-tight text-gray-900"><%- albumInfos.title -%></h1>
</div>
</header>

<main>
    <form method="post" class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8" enctype="multipart/form-data">
        <div class="col-span-full">
            <label for="cover-photo" class="block text-sm font-medium leading-6 text-gray-900">Cover photo</label>
            <div class="bg-white p7 rounded w-9/12 mx-auto">
                <div x-data="dataFileDnD()" class="relative flex flex-col p-4 text-gray-400 border border-gray-200 rounded">
                    <div x-ref="dnd"
                        class="relative flex flex-col text-gray-400 border border-gray-200 border-dashed rounded cursor-pointer">
                        <input accept="image" type="file" id="image"
                            class="absolute inset-0 z-50 w-full h-full p-0 m-0 outline-none opacity-0 cursor-pointer"
                            @change="addFiles($event)"
                            @dragover="$refs.dnd.classList.add('border-blue-400'); $refs.dnd.classList.add('ring-4'); $refs.dnd.classList.add('ring-inset');"
                            @dragleave="$refs.dnd.classList.remove('border-blue-400'); $refs.dnd.classList.remove('ring-4'); $refs.dnd.classList.remove('ring-inset');"
                            @drop="$refs.dnd.classList.remove('border-blue-400'); $refs.dnd.classList.remove('ring-4'); $refs.dnd.classList.remove('ring-inset');"
                            title="" />
                
                        <div class="flex flex-col items-center justify-center py-10 text-center">
                            <svg class="w-6 h-6 mr-1 text-current-50" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <p class="m-0">Drag your files here or click in this area.</p>
                        </div>
                    </div>
                
                    <template x-if="files.length > 0">
                        <div class="grid grid-cols-2 gap-4 mt-4 md:grid-cols-6" @drop.prevent="drop($event)"
                            @dragover.prevent="$event.dataTransfer.dropEffect = 'move'">
                            <template x-for="(_, index) in Array.from({ length: files.length })">
                                <div class="relative flex flex-col items-center overflow-hidden text-center bg-gray-100 border rounded cursor-move select-none"
                                    style="padding-top: 100%;" @dragstart="dragstart($event)" @dragend="fileDragging = null"
                                    :class="{'border-blue-600': fileDragging == index}" draggable="true" :data-index="index">
                                    <button class="absolute top-0 right-0 z-50 p-1 bg-white rounded-bl focus:outline-none" type="button" @click="remove(index)">
                                        <svg class="w-4 h-4 text-gray-700" xmlns="http://www.w3.org/2000/svg" fill="none"
                                            viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                    <template x-if="files[index].type.includes('audio/')">
                                        <svg class="absolute w-12 h-12 text-gray-400 transform top-1/2 -translate-y-2/3"
                                            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                                        </svg>
                                    </template>
                                    <template x-if="files[index].type.includes('application/') || files[index].type === ''">
                                        <svg class="absolute w-12 h-12 text-gray-400 transform top-1/2 -translate-y-2/3"
                                            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                        </svg>
                                    </template>
                                    <template x-if="files[index].type.includes('image/')">
                                        <img class="absolute inset-0 z-0 object-cover w-full h-full border-4 border-white preview"
                                            x-bind:src="loadFile(files[index])" />
                                    </template>
                                    <template x-if="files[index].type.includes('video/')">
                                        <video
                                            class="absolute inset-0 object-cover w-full h-full border-4 border-white pointer-events-none preview">
                                            <fileDragging x-bind:src="loadFile(files[index])" type="video/mp4">
                                        </video>
                                    </template>
                
                                    <div class="absolute bottom-0 left-0 right-0 flex flex-col p-2 text-xs bg-white bg-opacity-50">
                                        <span class="w-full font-bold text-gray-900 truncate"
                                            x-text="files[index].name">Loading</span>
                                        <span class="text-xs text-gray-900" x-text="humanFileSize(files[index].size)">...</span>
                                    </div>
                
                                    <div class="absolute inset-0 z-40 transition-colors duration-300" @dragenter="dragenter($event)"
                                        @dragleave="fileDropping = null"
                                        :class="{'bg-blue-200 bg-opacity-80': fileDropping == index && fileDragging != index}">
                                    </div>
                                </div>
                            </template>
                        </div>
                    </template>
                </div>
                </div>
            
        </div>

        <div id="image-details-form">

                <div>
                    <label for="image-title" class="block text-sm font-medium text-gray-700">Name</label>
                    <input type="text" id="image-name" name="image-name"
                           class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm">
                </div>
                <!-- <div class="mt-4">
                    <label for="image-description" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="image-description" name="image-description" rows="3"
                              class="mt-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm"></textarea>
                </div> -->
                <div class="mt-4">
                    <label for="image-pin" class="block text-sm font-medium text-gray-700">Pin</label>
                    <input type="checkbox" id="image-pin" name="image-pin" class="mt-1">
                </div>
                <div class="mt-4">
                    <button type="submit"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Save
                    </button>
                </div>
        </div>
    </form>
</main>


 
<!-- add components image here -->



<%- include('layout/footer') -%>



<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
<script src="https://unpkg.com/create-file-list"></script>
<script src="../public/utils.js"></script>
<script>
function dataFileDnD() {
    return {
        files: [],
        fileDragging: null,
        fileDropping: null,
        humanFileSize(size) {
            const i = Math.floor(Math.log(size) / Math.log(1024));
            return (
                (size / Math.pow(1024, i)).toFixed(2) * 1 +
                " " +
                ["B", "kB", "MB", "GB", "TB"][i]
            );
        },
        remove(index) {
            let files = [...this.files];
            files.splice(index, 1);

            this.files = createFileList(files);

        },
        drop(e) {
            let removed, add;
            let files = [...this.files];
            removed = files.splice(this.fileDragging, 1);
            files.splice(this.fileDropping, 0, ...removed);

            this.files = createFileList(files);

            this.fileDropping = null;
            this.fileDragging = null;
        },
        dragenter(e) {
            let targetElem = e.target.closest("[draggable]");

            this.fileDropping = targetElem.getAttribute("data-index");
        },
        dragstart(e) {
            this.fileDragging = e.target
                .closest("[draggable]")
                .getAttribute("data-index");
            e.dataTransfer.effectAllowed = "move";
        },
        loadFile(file) {
            const preview = document.querySelectorAll(".preview");
            const blobUrl = URL.createObjectURL(file);

            preview.forEach(elem => {
                elem.onload = () => {
                    URL.revokeObjectURL(elem.src); // free memory
                };
            });

            return blobUrl;
        },
        addFiles(e) {
            const files = createFileList([...this.files], [...e.target.files]);
            this.files = files;
            console.log(this)
            // this.form.formData.files = [...files];
        }
    };
}
const form = document.querySelector('form');
const album_slug = window.location.href.split('/').pop(); 
form.addEventListener('submit', async (e) => {
    e.preventDefault();
    try{
        let formData = new FormData();
        const imageInput = document.getElementById('image'); // Assuming this is your file input element for the image
        const nameInput = document.getElementById('image-name'); // Assuming this is your input element for the name
        const pinnedInput = document.getElementById('image-pin');
        

        console.log(imageInput.files, nameInput.value, pinnedInput.checked);

        formData.append('image', imageInput.files[0]); // Assuming only one image is selected
        formData.append('name', nameInput.value);
        formData.append('pinned', pinnedInput.checked ? 1 : 0);
        for (const entry of formData.entries())
            {
                console.log('formdata data', entry);
            }
        const response = fetchData(`/album/${album_slug}/image`, "POST", formData);

        if(!response.ok) throw new Error('Failed to upload file');

        console.log('Successfully sent files');
    } catch(error){
        console.error(error);
    }
});


</script>

<!-- <script>
    document.addEventListener('DOMContentLoaded', () => {
      const dropArea = document.getElementById('drop-area');
      const fileInput = document.getElementById('file-upload');
  
      if (!dropArea || !fileInput) {
        console.error('Drop area or file input not found.');
        return;
      }
  
      const uploadButton = dropArea.querySelector('label[for="file-upload"]');
      uploadButton.addEventListener('click', () => {
        fileInput.click();
        document.getElementById('image-details-form').classList.remove('hidden');
      });
  
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
      });
  
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }
  
      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
      });
  
      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
      });
  
      function highlight() {
        dropArea.classList.add('highlight');
      }
  
      function unhighlight() {
        dropArea.classList.remove('highlight');
      }
  
      dropArea.addEventListener('drop', handleDrop, false);


  
      function handleDrop(e) {
        console.log(e);
        setTimeout(() => {
            console.log(e);
        }, 1000)
        const dt = e.dataTransfer;
        console.log("tranfered data: ", dt);
        const files = dt.files;
        console.log("files: ", files);
  
        handleFiles(files);

        document.getElementById('image-details-form').classList.remove('hidden');
      }
  


      function handleFiles(files) {
        if (!files || files.length === 0) {
          console.error('No files selected.');
          return;
        }
        
        fileInput.files = files;
        uploadFile(fileInput.files[0]);
        console.log('files')
      }
  
      async function uploadFile(file) {
        const formData = new FormData();
        formData.append('imageFile', file);
  
        try {
            const url = window.location.href;
            const parts = url.split('/');
            const albumSlug = parts[parts.length - 1];
          const response = await fetch('/:album_slug/images/', {
            method: 'POST',
            body: formData
          });

          
  
          console.log(response);
          const data = await response.json();
        } catch (error) {
          console.error('Error uploading image:', error);
        }
      }
    });
  </script>
   -->